//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace int422_123b06.Entities
{
    public partial class Album
    {
        #region Primitive Properties
    
        public virtual string album_id
        {
            get;
            set;
        }
    
        public virtual string artist_id
        {
            get { return _artist_id; }
            set
            {
                if (_artist_id != value)
                {
                    if (Artist != null && Artist.artist_id != value)
                    {
                        Artist = null;
                    }
                    _artist_id = value;
                }
            }
        }
        private string _artist_id;
    
        public virtual string a_name
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Artist Artist
        {
            get { return _artist; }
            set
            {
                if (!ReferenceEquals(_artist, value))
                {
                    var previousValue = _artist;
                    _artist = value;
                    FixupArtist(previousValue);
                }
            }
        }
        private Artist _artist;
    
        public virtual ICollection<Song> Songs
        {
            get
            {
                if (_songs == null)
                {
                    var newCollection = new FixupCollection<Song>();
                    newCollection.CollectionChanged += FixupSongs;
                    _songs = newCollection;
                }
                return _songs;
            }
            set
            {
                if (!ReferenceEquals(_songs, value))
                {
                    var previousValue = _songs as FixupCollection<Song>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSongs;
                    }
                    _songs = value;
                    var newValue = value as FixupCollection<Song>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSongs;
                    }
                }
            }
        }
        private ICollection<Song> _songs;

        #endregion
        #region Association Fixup
    
        private void FixupArtist(Artist previousValue)
        {
            if (previousValue != null && previousValue.Albums.Contains(this))
            {
                previousValue.Albums.Remove(this);
            }
    
            if (Artist != null)
            {
                if (!Artist.Albums.Contains(this))
                {
                    Artist.Albums.Add(this);
                }
                if (artist_id != Artist.artist_id)
                {
                    artist_id = Artist.artist_id;
                }
            }
        }
    
        private void FixupSongs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Song item in e.NewItems)
                {
                    item.Album = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Song item in e.OldItems)
                {
                    if (ReferenceEquals(item.Album, this))
                    {
                        item.Album = null;
                    }
                }
            }
        }

        #endregion
    }
}
